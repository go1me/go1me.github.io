<?xml version="1.0" encoding="utf-8" standalone="yes"?>
<rss version="2.0" xmlns:atom="http://www.w3.org/2005/Atom">
  <channel>
    <title>go1me&#39;s 博客</title>
    <link>https://go1me.github.io/</link>
    <description>Recent content on go1me&#39;s 博客</description>
    <generator>Hugo -- gohugo.io</generator>
    <language>zh-cn</language>
    <lastBuildDate>Fri, 03 Dec 2021 20:10:19 +0800</lastBuildDate><atom:link href="https://go1me.github.io/index.xml" rel="self" type="application/rss+xml" />
    <item>
      <title>一道逆向题ROR的writeup</title>
      <link>https://go1me.github.io/post/%E4%B8%80%E9%81%93%E9%80%86%E5%90%91%E9%A2%98ror%E7%9A%84writeup/</link>
      <pubDate>Fri, 03 Dec 2021 20:10:19 +0800</pubDate>
      
      <guid>https://go1me.github.io/post/%E4%B8%80%E9%81%93%E9%80%86%E5%90%91%E9%A2%98ror%E7%9A%84writeup/</guid>
      <description>11月20日的时候，参加了西湖论剑CTF线上初选赛，此为此次竞赛REVERS第三题的wirteup，该题题目为ROR。
查看文件类型  使用file文件查看文件类型，发现文件为32位exe文件
使用IDA打开exe文件  使用32位IDA打开然后打开字符串页面发现有flag字符串
跳过去代码是这样的
代码走查 代码第37行接收输入Dst;
代码第38行判断输入字符长度是否为40;
代码第39到46行（截图没截全）是通过输入Dst通过某种变换得到Buf2;
代码第47行是比较Buf2和unk_405100内存中的内容;
代码第53行提示如果47行内存内容相同则输入的Dst就是flag，flag长度为40个字符。
公式变换 关键就是30行到46行，现在的写法比较不好理解，我们稍微转换一下*(&amp;amp;v2+j)其实就是v2[j]，以此类推得出如下公式:
for ( i = 0; i &amp;lt; 0x28; i += 8 ) { for ( j = 0; j &amp;lt; 8; ++j ) { v0=((v2[j]&amp;amp;v16[i])&amp;lt;&amp;lt;(8-(3- j)%8))|((v2[j]&amp;amp;v16[i])&amp;gt;&amp;gt;(3-j)%8)|((v2[j]&amp;amp;v15[i])&amp;lt;&amp;lt;(8-(2-j)%8))|((v2[j]&amp;amp;v15[i])&amp;gt;&amp;gt;(2 - j)%8)|((v2[j]&amp;amp;v14[i])&amp;lt;&amp;lt;(8-(1-j)%8))|((v2[j]&amp;amp;v14[i])&amp;gt;&amp;gt;(1-j)%8)|((v2[j]&amp;amp;Dst[i])&amp;lt;&amp;lt;(8-(0-j)%8))|((v2[j]&amp;amp;Dst[i])&amp;gt;&amp;gt;(0-j)%8); Buf2[j + i] = byte_405000[((v2[j]&amp;amp;v20[i])&amp;lt;&amp;lt;(8-(7-j)%8))|((v2[j]&amp;amp;v20[i])&amp;gt;&amp;gt;(7 - j)%8)|((v2[j]&amp;amp;v19[i])&amp;lt;&amp;lt;(8-(6-j)%8))|((v2[j]&amp;amp;v19[i])&amp;gt;&amp;gt;(6-j)%8)|((v2[j]&amp;amp;v18[i])&amp;lt;&amp;lt;(8-(5-j)%8))|((v2[j]&amp;amp;v18[i])&amp;gt;&amp;gt;(5-j)%8)|((v2[j]&amp;amp;v17[i])&amp;lt;&amp;lt;(8-(4-j)%8)|((v2[j]&amp;amp;v17[i])&amp;gt;&amp;gt;(4-j)%8)|v0)]; } } 其中有一个重复的结构(v2[j]&amp;amp;v16[i])&amp;laquo;(8-(3- j)%8))|((v2[j]&amp;amp;v16[i])&amp;raquo;(3-j)%8)，可以百度一下，这个就是ROR算法，循环右移。
因此上面的长长的公式可以再变化：
for ( i = 0; i &amp;lt; 0x28; i += 8 ) { for ( j = 0; j &amp;lt; 8; ++j ) { v0= ROR(v2[j]&amp;amp;v16[i],(3-j)%8)|ROR(v2[j]&amp;amp;v15[i],(2-j)%8)|ROR(v2[j]&amp;amp;v14[i],(1-j)%8)|ROR(v2[j]&amp;amp;Dst[i],(0-j)%8); Buf2[j + i] = byte_405000[ROR(v2[j]&amp;amp;v20[i],(7-j)%8)|ROR(v2[j]&amp;amp;v19[i],(6-j)%8)|ROR(v2[j]&amp;amp;v18[i],(5-j)%8)|ROR(v2[j]&amp;amp;v17[i],(4-j)%8)|v0]; } } 其中ROR为循环右移函数。</description>
    </item>
    
    <item>
      <title>基于hugo搭建博客</title>
      <link>https://go1me.github.io/post/%E5%9F%BA%E4%BA%8Ehugo%E6%90%AD%E5%BB%BA%E5%8D%9A%E5%AE%A2/</link>
      <pubDate>Wed, 01 Dec 2021 19:40:43 +0800</pubDate>
      
      <guid>https://go1me.github.io/post/%E5%9F%BA%E4%BA%8Ehugo%E6%90%AD%E5%BB%BA%E5%8D%9A%E5%AE%A2/</guid>
      <description>简介  Hugo是由Go语言实现的静态网站生成器。简单、易用、高效、易扩展、快速部署。这句话是抄的。总之就是一个比较好用的的静态页面生成工具。
工具安装  直接看官网把参考这里
环境搭建  基于github，我这边创建了两个仓库，一个用来放置Hugo源文件及markdown文件，另外一个用来放置web静态文件，用来发布。
github仓库创建  创建第一个仓库用于保存Hugo源文件及markdown文件。比如我是https://github.com/go1me/blog.git，，即仓库名为blog，名字可以随便起，然后我设置了非公开项目。 创建第二个仓库用来放置对外发布的web静态文件，这个仓库的名字是固定的，必须是自己 github用户名.github.io，比如我必须是 https://github.com/go1me/go1me.github.io，即仓库名为 go1me.github.io。然后以后就可以用https://go1me.github.io来作为自己的blog的url网址。 当然，如果你不需要用 github.io来作为自己的blog url，第二步可以省略。再当然如过你不需要github保存自己的blog内容，第一步也可以省略。  创建并写博客 # 先clone blog这个仓库git clone git@github:go1me/blog.git# 创建hugo项目，其中blog跟仓库名字相同，--force是因为本地已经有blog文件夹hugo new site blog --forcecd blog#参考https://themes.gohugo.io/themes/github-style/# 添加hugo的模板git submodule add git@github.com:MeiK2333/github-style.git themes/github-style# 参考https://themes.gohugo.io/themes/github-style/修改config.toml#新建一篇文章，编辑hellowod.md写你的博客hugo new post/helloword.md#添加 public文件夹git submodule add git@github.com:go1me/go1me.github.io.git public#编译hugo -D#先提交public,即go1me.github.iocd publicgit add .git commit -m &amp;quot;xxx&amp;quot;git pushcd .</description>
    </item>
    
    <item>
      <title>Helloword</title>
      <link>https://go1me.github.io/post/helloword/</link>
      <pubDate>Mon, 29 Nov 2021 23:29:23 +0800</pubDate>
      
      <guid>https://go1me.github.io/post/helloword/</guid>
      <description></description>
    </item>
    
  </channel>
</rss>
